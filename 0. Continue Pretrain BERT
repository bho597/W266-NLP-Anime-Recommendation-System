{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"V100"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"dC9SAnthdHXb","executionInfo":{"status":"ok","timestamp":1713049263420,"user_tz":420,"elapsed":2,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"outputs":[],"source":["# brendanho123\n","# PATH = 'drive/My Drive/Colab Notebooks/W266/Final Project/'\n","\n","# bholly597\n","PATH = 'drive/My Drive/Final Project/'"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# standard libraries\n","import pandas as pd\n","import numpy as np\n","import math\n","\n","# train/val/test split\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# for models\n","import tensorflow as tf\n","\n","!pip install -q transformers==4.37.2\n","import transformers\n","from transformers import pipeline, TFBertModel, TFBertForMaskedLM, BertTokenizer, DataCollatorForLanguageModeling\n","\n","!pip install datasets -q\n","import datasets\n","\n","# for visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# for evaluation metrics\n","from sklearn.metrics import classification_report\n","\n","!pip install evaluate -q\n","from evaluate import load"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4lyqyYtEdI6R","executionInfo":{"status":"ok","timestamp":1713049316716,"user_tz":420,"elapsed":53297,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"93f9c079-342c-4fd7-ca3b-ba1d233936a9"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import pickle"],"metadata":{"id":"IRpymgLfecki","executionInfo":{"status":"ok","timestamp":1713049316717,"user_tz":420,"elapsed":4,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["CHECKPOINT = 'bert-base-cased'\n","TOKENIZER = BertTokenizer.from_pretrained(CHECKPOINT)\n","BERT_MODEL = TFBertModel.from_pretrained(CHECKPOINT)\n","BERT_MLM = TFBertForMaskedLM.from_pretrained(CHECKPOINT)\n","\n","# per BERT default\n","MAX_LEN = 512\n","VOCAB_SIZE = 28996\n","HIDDEN_DIM = 768\n","\n","BATCH_SIZE = 8\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Gg6fnz9dQh-","executionInfo":{"status":"ok","timestamp":1713049715212,"user_tz":420,"elapsed":7260,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"3b903a41-fb54-4302-accc-a7b49f5946f9"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias']\n","- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n","All the weights of TFBertModel were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n","All PyTorch model weights were used when initializing TFBertForMaskedLM.\n","\n","All the weights of TFBertForMaskedLM were initialized from the PyTorch model.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertForMaskedLM for predictions without further training.\n"]}]},{"cell_type":"markdown","metadata":{"id":"AcEQwd6YmLgK"},"source":["# Define reusable functions"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"v3rNzaA-mNit","executionInfo":{"status":"ok","timestamp":1713049326196,"user_tz":420,"elapsed":4,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"outputs":[],"source":["def to_tokenize(input):\n","  return TOKENIZER(input,\n","                   add_special_tokens=True,\n","                   max_length=MAX_LEN,\n","                   padding='max_length',\n","                   return_token_type_ids=True,\n","                   truncation=True,\n","                   return_tensors=\"tf\"\n","                   )"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzQCw5KEs6c6","executionInfo":{"status":"ok","timestamp":1713049326196,"user_tz":420,"elapsed":3,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"outputs":[],"source":["def show_results(model, feature, label, classes):\n","  yhat_val = model.predict(feature)\n","  yhat_val_result = np.argmax(yhat_val, axis=-1)\n","\n","  print('Validation classification Report \\n')\n","  print(classification_report(label, yhat_val_result, target_names=classes))\n","\n","  ax = sns.heatmap(tf.math.confusion_matrix(label, yhat_val_result),\n","                 annot=True,\n","                 fmt='.0f',\n","                 cmap='Blues',\n","                 yticklabels=classes,\n","                 xticklabels=classes,\n","                 cbar=False)\n","\n","  ax.set(xlabel='Predicted Label', ylabel='True Label')\n","  plt.title('Validation Confusion Matrix')\n","  plt.show()"]},{"cell_type":"code","source":[],"metadata":{"id":"bDlzUjfxdKJx","executionInfo":{"status":"ok","timestamp":1713049326196,"user_tz":420,"elapsed":3,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3yll8eNa33R-"},"source":["# Load Dataset"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"5c-hesq55bo0","executionInfo":{"status":"ok","timestamp":1713049329219,"user_tz":420,"elapsed":3025,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"outputs":[],"source":["cleaned_data_path = f'{PATH}data/cleaned_data'\n","\n","\n","unpickled_data = {}\n","\n","keys_to_unpickle = [\n","    'train_data',\n","    'test_data',\n","    'val_data',\n","]\n","\n","\n","for key in keys_to_unpickle:\n","    filename = f'{cleaned_data_path}/{key}.pkl'\n","    with open(filename, 'rb') as file:\n","        unpickled_data[key] = pickle.load(file)\n","\n","\n","train_data = unpickled_data['train_data']\n","test_data = unpickled_data['test_data']\n","val_data = unpickled_data['val_data']\n"]},{"cell_type":"code","source":["num_train_examples = 2000\n","num_test_examples = 200\n","num_val_examples = 200\n","\n","X_train_synopsis = train_data['synopsis'][:num_train_examples]\n","X_test_synopsis = test_data['synopsis'][:num_test_examples]\n","X_val_synopsis = val_data['synopsis'][:num_val_examples]\n","\n","X_train_reviews = train_data['text'][:num_train_examples]\n","X_test_reviews = test_data['text'][:num_test_examples]\n","X_val_reviews = val_data['text'][:num_val_examples]\n","\n"],"metadata":{"id":"v2lD6YFpeGOJ","executionInfo":{"status":"ok","timestamp":1713049329219,"user_tz":420,"elapsed":5,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["X_train_raw = pd.concat([X_train_synopsis, X_train_reviews]).sample(frac=1).reset_index(drop=True).astype(str).tolist()\n","X_test_raw = pd.concat([X_test_synopsis, X_test_reviews]).sample(frac=1).reset_index(drop=True).astype(str).tolist()\n","X_val_raw = pd.concat([X_val_synopsis, X_val_reviews]).sample(frac=1).reset_index(drop=True).astype(str).tolist()\n","\n","X_train = [item.replace('[Written by MAL Rewrite]', '').strip() for item in X_train_raw]\n","X_test = [item.replace('[Written by MAL Rewrite]', '').strip() for item in X_test_raw]\n","X_val = [item.replace('[Written by MAL Rewrite]', '').strip() for item in X_val_raw]\n","\n","\n","print('--- training set ---')\n","print('number of samples: ', len(X_train))\n","\n","print('--- validation set ---')\n","print('number of samples: ', len(X_test))\n","\n","print('--- test set ---')\n","print('number of samples: ', len(X_val))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EpMI8f-Me0TI","executionInfo":{"status":"ok","timestamp":1713049329219,"user_tz":420,"elapsed":4,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"b38a321a-f2e2-4509-8858-83ac7e488e69"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["--- training set ---\n","number of samples:  4000\n","--- validation set ---\n","number of samples:  400\n","--- test set ---\n","number of samples:  400\n"]}]},{"cell_type":"code","source":["X_train[:4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sP9L5C4affQ4","executionInfo":{"status":"ok","timestamp":1713049329219,"user_tz":420,"elapsed":2,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"42008fca-d820-428f-f779-f1b8bd321dbc"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Suzuka Nagami is a beautiful third-year middle school student who has excellent grades and is the student council president. She wrote a novel about a little sister who dotes on her older brother, and the novel wins a light novel award. After they discuss the matter, Yuu is the one who debuts as a proxy light novel author instead of Suzuka, under the pen name Chikai Towano.      (Source: ANN)',\n"," \"Moments prior to Naruto Uzumaki's birth, a huge demon known as the Kyuubi, the Nine-Tailed Fox, attacked Konohagakure, the Hidden Leaf Village, and wreaked havoc. In order to put an end to the Kyuubi's rampage, the leader of the village, the Fourth Hokage, sacrificed his life and sealed the monstrous beast inside the newborn Naruto.      Now, Naruto is a hyperactive and knuckle-headed ninja still living in Konohagakure. Shunned because of the Kyuubi inside him, Naruto struggles to find his place in the village, while his burning desire to become the Hokage of Konohagakure leads him not only to some great new friends, but also some deadly foes.\",\n"," 'Since entering high school, Kyou Nukui has not attended a single class. Instead, he spends his days locked in his bedroom composing music and posting it on the internet accompanied by his only friend\\'s drawings, an artist with the pseudonym \"Kiriyume.\" One day, Kyou hesitantly uploads his newest composition, and first departure from his typical style, TR03. Additionally, he does not upload under his usual handle \"HibikiP,\" but simply under the name \"me,\" and without a drawing from his mysterious friend.      Shortly after, Kyou receives a very polite email, not only praising his music but also somehow discerning that he is, in fact, the composer behind TR03. The e-mail also asks for a meetup in a nearby park, to which he cautiously decides to go. To his surprise, however, he finds three elementary school girls at the meeting place! Suddenly, Jun Gotou, Nozomi Momijidani, and Sora Kaneshiro ask for his help to hold a concert in their home, an old church now used as an orphanage. And though Kyou is reluctant at first, after seeing their musical abilities, he eventually decides to accept their proposal.      Based on the light novel of the same name by the award-winning Sagu Aoyama,  Tenshi no 3P!  follows Kyou as these three angels change his life.',\n"," 'Clad in desert pink and the size of a mere child, the infamous \"Pink Devil\" mercilessly hunts down other players in the firearm-centered world of the virtual reality game Gun Gale Online. But in real life, this feared player killer is not quite who anyone would expect.       A shy university student in Tokyo, Karen Kohiruimaki stands in stark contrast to her in-game avatar—in fact, she happens to stand above everyone else too, much to her dismay. Towering above all the people around her, Karen\\'s insecurities over her height reach the point where she turns to the virtual world for an escape. Starting game after game in hopes of manifesting as a cute, short character, she finally obtains her ideal self in the world of Gun Gale Online. Overjoyed by her new persona, she pours her time into the game as LLENN, garnering her reputation as the legendary player killer.       However, when one of LLENN\\'s targets gets the best of her, she ends up meeting Pitohui, a skilled yet eccentric woman. Quickly becoming friends with Karen, Pitohui insists that LLENN participates in Squad Jam, a battle royale that pits teams against one another, fighting until only one remains. Thrust into the heated competition, LLENN must fight with all her wit and will if she hopes to shoot her way to the top.']"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["X_train_tokenized = to_tokenize(X_train)\n","X_val_tokenized = to_tokenize(X_val)\n","X_test_tokenized = to_tokenize(X_test)"],"metadata":{"id":"AXwXLo_de9hQ","executionInfo":{"status":"ok","timestamp":1713049385596,"user_tz":420,"elapsed":56378,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["X_train_repeated = [item for item in X_train for _ in range(10)]\n","X_val_repeated = [item for item in X_val for _ in range(10)]\n","\n","len(X_train_repeated)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5-VESbIHfc0w","executionInfo":{"status":"ok","timestamp":1713049385596,"user_tz":420,"elapsed":11,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"367f892f-194d-44c7-ed12-a4ce9e89729d"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["40000"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["X_train_repeated_tokenized = to_tokenize(X_train_repeated)\n","X_train_repeated_tokenized['labels'] = X_train_repeated_tokenized['input_ids']\n","\n","X_val_repeated_tokenized = to_tokenize(X_val_repeated)\n","X_val_repeated_tokenized['labels'] = X_val_repeated_tokenized['input_ids']"],"metadata":{"id":"MeyV5zRKmV3u","executionInfo":{"status":"ok","timestamp":1713049635835,"user_tz":420,"elapsed":250248,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["reformat_train_sentence = datasets.Dataset.from_dict({key: X_train_repeated_tokenized[key].numpy() for key in X_train_repeated_tokenized.keys()})\n","reformat_val_sentence = datasets.Dataset.from_dict({key: X_val_repeated_tokenized[key].numpy() for key in X_val_repeated_tokenized.keys()})"],"metadata":{"id":"ZqC9_PAjmbnU","executionInfo":{"status":"ok","timestamp":1713049638457,"user_tz":420,"elapsed":2632,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["def continue_pretrain(mlm_model=BERT_MLM,\n","                      train_data=reformat_train_sentence,\n","                      val_data=reformat_val_sentence,\n","                      continue_flag=True):\n","\n","  # Use DataCollatorForLanguageModeling to implement `dynamic masking`\n","  data_collator = DataCollatorForLanguageModeling(tokenizer=TOKENIZER,\n","                                                  mlm_probability=0.15,\n","                                                  return_tensors='tf')\n","\n","  train_dataset = mlm_model.prepare_tf_dataset(reformat_train_sentence,\n","                                               collate_fn=data_collator,\n","                                               shuffle=True,\n","                                               batch_size=BATCH_SIZE\n","                                               )\n","\n","  val_dataset = mlm_model.prepare_tf_dataset(reformat_val_sentence,\n","                                             collate_fn=data_collator,\n","                                             shuffle=True,\n","                                             batch_size=BATCH_SIZE\n","                                             )\n","\n","  LR_SCHEDULE = tf.keras.optimizers.schedules.PolynomialDecay(initial_learning_rate=1e-6,\n","                                                            decay_steps=5336,\n","                                                            end_learning_rate=1e-9,\n","                                                            power=1.0)\n","  OPTIMIZER = tf.keras.optimizers.Adam(learning_rate=LR_SCHEDULE,\n","                                     beta_1=0.9,\n","                                     beta_2=0.98,\n","                                     epsilon=1e-06,\n","                                     clipnorm=0.0)\n","\n","  mlm_model.compile(optimizer=OPTIMIZER)\n","\n","  # fit the model if continue pretrain, otherwise return the compiled original model\n","  if not continue_flag:\n","    loss = mlm_model.evaluate(val_dataset)\n","    print(f\"Original Perplexity: {math.exp(loss):.2f}\")\n","  else:\n","    mlm_model.fit(train_dataset,\n","                  validation_data=val_dataset,\n","                  batch_size=BATCH_SIZE,\n","                  epochs=5,\n","                  verbose=1\n","                  )\n","    loss = mlm_model.evaluate(val_dataset)\n","    print(f\"Trained Perplexity: {math.exp(loss):.2f}\")\n","\n","  return mlm_model"],"metadata":{"id":"RPwoKuMRmftu","executionInfo":{"status":"ok","timestamp":1713049638457,"user_tz":420,"elapsed":6,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["new_pretrained = continue_pretrain(continue_flag=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ff7bdlVbmwlV","executionInfo":{"status":"ok","timestamp":1713059197743,"user_tz":420,"elapsed":9482539,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}},"outputId":"4a690e4e-f9ae-4085-bcd4-1e22d059a19e"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","5000/5000 [==============================] - 1905s 371ms/step - loss: 2.2329 - val_loss: 2.0805\n","Epoch 2/5\n","5000/5000 [==============================] - 1855s 371ms/step - loss: 2.1925 - val_loss: 2.0677\n","Epoch 3/5\n","5000/5000 [==============================] - 1874s 375ms/step - loss: 2.1892 - val_loss: 2.0740\n","Epoch 4/5\n","5000/5000 [==============================] - 1856s 371ms/step - loss: 2.1941 - val_loss: 2.0815\n","Epoch 5/5\n","5000/5000 [==============================] - 1872s 374ms/step - loss: 2.1975 - val_loss: 2.0782\n","500/500 [==============================] - 66s 131ms/step - loss: 2.0671\n","Trained Perplexity: 7.90\n"]}]},{"cell_type":"code","source":["pretrain_path = f'{PATH}data/BERT_continue_pretrained'\n","new_pretrained.save_pretrained(pretrain_path)"],"metadata":{"id":"5GVqVBcp0eW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"x9kBYQ7HaujS","executionInfo":{"status":"aborted","timestamp":1713048472785,"user_tz":420,"elapsed":3,"user":{"displayName":"Brendan Ho","userId":"08949042960870142991"}}},"execution_count":null,"outputs":[]}]}